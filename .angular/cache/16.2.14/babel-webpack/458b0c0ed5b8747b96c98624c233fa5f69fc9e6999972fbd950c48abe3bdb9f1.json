{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./web-request.service\";\nlet APIService = /*#__PURE__*/(() => {\n  class APIService {\n    constructor(webReqService) {\n      this.webReqService = webReqService;\n    }\n    // GET >>>\n    getArguments() {\n      return this.webReqService.get('arguments');\n    }\n    getFalseArguments() {\n      return this.webReqService.get('false-arguments');\n    }\n    getTrueArguments() {\n      return this.webReqService.get('true-arguments');\n    }\n    getIrrefutableArguments() {\n      return this.webReqService.get('irrefutable-arguments');\n    }\n    getSelectedArgument(thingID) {\n      return this.webReqService.get(`arguments/${thingID}`);\n    }\n    getTerms() {\n      return this.webReqService.get('dictionary');\n    }\n    getSelectedPending(tempID) {\n      return this.webReqService.get(`editors/pending/${tempID}`);\n    }\n    getSelectedApproved(tempID) {\n      return this.webReqService.get(`editors/approved/${tempID}`);\n    }\n    getSelectedArgumentxxx(argumentID) {\n      return this.webReqService.get(`new/${argumentID}`);\n    }\n    getAllArguments() {\n      return this.webReqService.get('editors');\n    }\n    getSelectedAnswer(argumentID, answerID) {\n      return this.webReqService.get(`arguments/${argumentID}/${answerID}`);\n    }\n    getSelectedTerm(termID) {\n      return this.webReqService.get(`dictionary/${termID}`);\n    }\n    getAnswerForEditing(argumentID, answerID) {\n      return this.webReqService.get(`edit/${argumentID}/${answerID}`);\n    }\n    getSearchResults(searchTerm) {\n      return this.webReqService.get(`search/${searchTerm}`);\n    }\n    // GET <<<\n    // SUBMIT >>>\n    // SUBMIT <<<\n    submitNewArgument(title, answer, email) {\n      return this.webReqService.post('new', {\n        title,\n        answer,\n        email\n      });\n    }\n    submitNewAnswer(argumentID, title, answer, email) {\n      return this.webReqService.post(`new/${argumentID}`, {\n        argumentID,\n        title,\n        answer,\n        email\n      });\n    }\n    submitEditedAnswer(argumentID, answerID, title, answer, email) {\n      return this.webReqService.post(`edit/${argumentID}/${answerID}`, {\n        argumentID,\n        answerID,\n        title,\n        answer,\n        email\n      });\n    }\n    // APPROVE >>>\n    approveNewArgument(argumentID, title, answers, tags) {\n      return this.webReqService.post(`editors/pending/${argumentID}`, {\n        title,\n        answers,\n        tags\n      });\n    }\n    approveNewAnswer(tempID, title, answers, argID) {\n      return this.webReqService.patch(`new-answer/${tempID}`, {\n        answers,\n        argID\n      });\n    }\n    approveEditedAnswer(tempID, answerID, editedAnswer, answers, argID) {\n      return this.webReqService.patch(`editors/pending/${tempID}`, {\n        answers,\n        argID,\n        answerID,\n        editedAnswer\n      });\n    }\n    // APPROVE <<<\n    // STRAIGHT BY EDITORS >>>\n    straightNewArgument(title, answers, tags) {\n      return this.webReqService.post('editors/new', {\n        title,\n        answers,\n        tags\n      });\n    }\n    static #_ = this.ɵfac = function APIService_Factory(t) {\n      return new (t || APIService)(i0.ɵɵinject(i1.WebRequestService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: APIService,\n      factory: APIService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return APIService;\n})();\nexport { APIService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}