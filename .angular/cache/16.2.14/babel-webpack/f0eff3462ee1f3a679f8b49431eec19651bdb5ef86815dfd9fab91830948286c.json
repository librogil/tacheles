{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/api.service\";\nimport * as i2 from \"src/app/window-detector.service\";\nclass ArgumentsListResolverService {\n  constructor(apiService, windowDetector) {\n    this.apiService = apiService;\n    this.windowDetector = windowDetector;\n  }\n  resolve() {\n    //return this.apiService.getTrueArguments();\n    this.type = this.windowDetector.getType();\n    if (this.type) {\n      switch (this.type) {\n        case 'false':\n          return this.apiService.getFalseArguments();\n        case 'true':\n          return this.apiService.getTrueArguments();\n        case 'irrefutable':\n          return this.apiService.getIrrefutableArguments();\n      }\n    } else {\n      console.log('waaaa');\n    }\n    /*\n      console.log(this.windowDetector.getType());\n      //if (window.location.href.indexOf(\"false\") > -1 || (this.windowDetector.getType().includes('false'))){\n        if ((this.windowDetector.getType().includes('false'))){\n        console.log('fff');\n        console.log(this.windowDetector.getType());\n        return this.apiService.getFalseArguments();\n      }\n      else if ((this.windowDetector.getType().includes('true'))){\n        console.log('ttt');\n        console.log(this.windowDetector.getType());\n        return this.apiService.getTrueArguments();\n      }\n      else {\n        return this.apiService.getIrrefutableArguments();\n      }\n    }\n    else {\n      \n           return this.apiService.getIrrefutableArguments();\n    }\n    */\n  }\n  static #_ = this.ɵfac = function ArgumentsListResolverService_Factory(t) {\n    return new (t || ArgumentsListResolverService)(i0.ɵɵinject(i1.APIService), i0.ɵɵinject(i2.WindowDetectorService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArgumentsListResolverService,\n    factory: ArgumentsListResolverService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ArgumentsListResolverService };","map":{"version":3,"names":["ArgumentsListResolverService","constructor","apiService","windowDetector","resolve","type","getType","getFalseArguments","getTrueArguments","getIrrefutableArguments","console","log","_","i0","ɵɵinject","i1","APIService","i2","WindowDetectorService","_2","factory","ɵfac","providedIn"],"sources":["/Users/librogil/Dropbox/CS/Apps/TACHELES/tacheles/front/src/app/pages/user-pages/arguments-list/arguments-list-resolver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs'; \nimport { Argument } from 'src/app/models/argument.model';\nimport { APIService } from 'src/app/api.service';\nimport { WindowDetectorService } from 'src/app/window-detector.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ArgumentsListResolverService {\n\n  type: string;\n\n  constructor(private apiService: APIService, private windowDetector: WindowDetectorService) { }\n\n  resolve(): \n  Observable<any> | Promise<any> | Argument {\n    //return this.apiService.getTrueArguments();\n\n    this.type = this.windowDetector.getType();\n\n    if (this.type) {\n      switch(this.type) {\n        case 'false':\n          return this.apiService.getFalseArguments();\n        case 'true':\n          return this.apiService.getTrueArguments();\n        case 'irrefutable':\n          return this.apiService.getIrrefutableArguments();\n      }\n    }\n    else {\n      console.log('waaaa');\n    }\n    /*\n      console.log(this.windowDetector.getType());\n      //if (window.location.href.indexOf(\"false\") > -1 || (this.windowDetector.getType().includes('false'))){\n        if ((this.windowDetector.getType().includes('false'))){\n        console.log('fff');\n        console.log(this.windowDetector.getType());\n        return this.apiService.getFalseArguments();\n      }\n      else if ((this.windowDetector.getType().includes('true'))){\n        console.log('ttt');\n        console.log(this.windowDetector.getType());\n        return this.apiService.getTrueArguments();\n      }\n      else {\n        return this.apiService.getIrrefutableArguments();\n      }\n    }\n    else {\n      \n\n      return this.apiService.getIrrefutableArguments();\n    }\n*/\n      \n  }\n}"],"mappings":";;;AAMA,MAIaA,4BAA4B;EAIvCC,YAAoBC,UAAsB,EAAUC,cAAqC;IAArE,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,cAAc,GAAdA,cAAc;EAA2B;EAE7FC,OAAOA,CAAA;IAEL;IAEA,IAAI,CAACC,IAAI,GAAG,IAAI,CAACF,cAAc,CAACG,OAAO,EAAE;IAEzC,IAAI,IAAI,CAACD,IAAI,EAAE;MACb,QAAO,IAAI,CAACA,IAAI;QACd,KAAK,OAAO;UACV,OAAO,IAAI,CAACH,UAAU,CAACK,iBAAiB,EAAE;QAC5C,KAAK,MAAM;UACT,OAAO,IAAI,CAACL,UAAU,CAACM,gBAAgB,EAAE;QAC3C,KAAK,aAAa;UAChB,OAAO,IAAI,CAACN,UAAU,CAACO,uBAAuB,EAAE;;KAErD,MACI;MACHC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;;IAEtB;;;;;;;;;;;;;;;;;;;;;;EAwBF;EAAC,QAAAC,CAAA,G;qBAjDUZ,4BAA4B,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,qBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAA5BnB,4BAA4B;IAAAoB,OAAA,EAA5BpB,4BAA4B,CAAAqB,IAAA;IAAAC,UAAA,EAH3B;EAAM;;SAGPtB,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}