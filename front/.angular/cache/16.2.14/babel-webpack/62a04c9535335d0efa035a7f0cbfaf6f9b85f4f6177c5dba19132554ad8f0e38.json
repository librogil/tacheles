{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/api.service\";\nclass TermResolverService {\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  resolve(route) {\n    this.termID = route.paramMap.get('termID');\n    return this.apiService.getSelectedTerm(this.termID);\n  }\n  static #_ = this.ɵfac = function TermResolverService_Factory(t) {\n    return new (t || TermResolverService)(i0.ɵɵinject(i1.APIService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TermResolverService,\n    factory: TermResolverService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { TermResolverService };","map":{"version":3,"names":["TermResolverService","constructor","apiService","resolve","route","termID","paramMap","get","getSelectedTerm","_","i0","ɵɵinject","i1","APIService","_2","factory","ɵfac","providedIn"],"sources":["/Users/librogil/Dropbox/CS/Apps/TACHELES/tacheles/front/src/app/pages/user-pages/term/term-resolver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs'; \nimport { APIService } from 'src/app/api.service';\nimport { Term } from 'src/app/models/term.model';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TermResolverService implements Resolve<Term> {\n\n  termID: string;\n  \n  constructor(private apiService: APIService) { }\n\n  resolve(route: ActivatedRouteSnapshot): \n  Observable<any> | Promise<any> | Term {\n    this.termID = route.paramMap.get('termID');\n    return this.apiService.getSelectedTerm(this.termID);\n  }\n}"],"mappings":";;AAMA,MAIaA,mBAAmB;EAI9BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAgB;EAE9CC,OAAOA,CAACC,KAA6B;IAEnC,IAAI,CAACC,MAAM,GAAGD,KAAK,CAACE,QAAQ,CAACC,GAAG,CAAC,QAAQ,CAAC;IAC1C,OAAO,IAAI,CAACL,UAAU,CAACM,eAAe,CAAC,IAAI,CAACH,MAAM,CAAC;EACrD;EAAC,QAAAI,CAAA,G;qBAVUT,mBAAmB,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBd,mBAAmB;IAAAe,OAAA,EAAnBf,mBAAmB,CAAAgB,IAAA;IAAAC,UAAA,EAHlB;EAAM;;SAGPjB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}