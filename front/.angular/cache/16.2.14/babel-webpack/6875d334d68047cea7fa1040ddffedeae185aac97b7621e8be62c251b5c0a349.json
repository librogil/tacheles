{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./web-request.service\";\nclass TachlesService {\n  constructor(webReqService) {\n    this.webReqService = webReqService;\n  }\n  // GET >>>\n  getArguments() {\n    return this.webReqService.get('arguments');\n  }\n  getFalseArguments() {\n    return this.webReqService.get('false-arguments');\n  }\n  getTrueArguments() {\n    return this.webReqService.get('true-arguments');\n  }\n  getIrrefutableArguments() {\n    return this.webReqService.get('irrefutable-arguments');\n  }\n  getSelectedArgument(thingID) {\n    return this.webReqService.get(`arguments/${thingID}`);\n  }\n  getTerms() {\n    return this.webReqService.get('dictionary');\n  }\n  getSelectedPending(tempID) {\n    return this.webReqService.get(`editors/pending/${tempID}`);\n  }\n  getSelectedApproved(tempID) {\n    return this.webReqService.get(`editors/approved/${tempID}`);\n  }\n  getSelectedArgumentxxx(argumentID) {\n    return this.webReqService.get(`new/${argumentID}`);\n  }\n  getAllArguments() {\n    return this.webReqService.get('editors');\n  }\n  getSelectedAnswer(argumentID, answerID) {\n    return this.webReqService.get(`arguments/${argumentID}/${answerID}`);\n  }\n  getSelectedTerm(termID) {\n    return this.webReqService.get(`dictionary/${termID}`);\n  }\n  getAnswerForEditing(argumentID, answerID) {\n    return this.webReqService.get(`edit/${argumentID}/${answerID}`);\n  }\n  getSearchResults(searchTerm) {\n    return this.webReqService.get(`search/${searchTerm}`);\n  }\n  // GET <<<\n  // SUBMIT >>>\n  // SUBMIT <<<\n  submitNewArgument(title, answer, email) {\n    return this.webReqService.post('new', {\n      title,\n      answer,\n      email\n    });\n  }\n  submitNewAnswer(argumentID, title, answer, email) {\n    return this.webReqService.post(`new/${argumentID}`, {\n      argumentID,\n      title,\n      answer,\n      email\n    });\n  }\n  submitEditedAnswer(argumentID, answerID, title, answer, email) {\n    return this.webReqService.post(`edit/${argumentID}/${answerID}`, {\n      argumentID,\n      answerID,\n      title,\n      answer,\n      email\n    });\n  }\n  // APPROVE >>>\n  approveNewArgument(argumentID, title, answers, tags) {\n    return this.webReqService.post(`editors/pending/${argumentID}`, {\n      title,\n      answers,\n      tags\n    });\n  }\n  approveNewAnswer(tempID, title, answers, argID) {\n    return this.webReqService.patch(`new-answer/${tempID}`, {\n      answers,\n      argID\n    });\n  }\n  approveEditedAnswer(tempID, answerID, editedAnswer, answers, argID) {\n    return this.webReqService.patch(`editors/pending/${tempID}`, {\n      answers,\n      argID,\n      answerID,\n      editedAnswer\n    });\n  }\n  // APPROVE <<<\n  // STRAIGHT BY EDITORS >>>\n  straightNewArgument(title, answers, tags) {\n    return this.webReqService.post('editors/new', {\n      title,\n      answers,\n      tags\n    });\n  }\n  static #_ = this.ɵfac = function TachlesService_Factory(t) {\n    return new (t || TachlesService)(i0.ɵɵinject(i1.WebRequestService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TachlesService,\n    factory: TachlesService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { TachlesService };","map":{"version":3,"names":["TachlesService","constructor","webReqService","getArguments","get","getFalseArguments","getTrueArguments","getIrrefutableArguments","getSelectedArgument","thingID","getTerms","getSelectedPending","tempID","getSelectedApproved","getSelectedArgumentxxx","argumentID","getAllArguments","getSelectedAnswer","answerID","getSelectedTerm","termID","getAnswerForEditing","getSearchResults","searchTerm","submitNewArgument","title","answer","email","post","submitNewAnswer","submitEditedAnswer","approveNewArgument","answers","tags","approveNewAnswer","argID","patch","approveEditedAnswer","editedAnswer","straightNewArgument","_","i0","ɵɵinject","i1","WebRequestService","_2","factory","ɵfac","providedIn"],"sources":["/Users/librogil/Dropbox/CS/Apps/TACHELES/tacheles/front/src/app/tachles.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { WebRequestService } from './web-request.service';\nimport { A } from './models/a.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TachlesService {\n\n  constructor(private webReqService: WebRequestService) { }\n\n  // GET >>>\n\n  getArguments() {\n    return this.webReqService.get('arguments');\n  }\n\n  getFalseArguments() {\n    return this.webReqService.get('false-arguments');\n  }\n\n  getTrueArguments() {\n    return this.webReqService.get('true-arguments');\n  }\n\n  getIrrefutableArguments() {\n    return this.webReqService.get('irrefutable-arguments');\n  }\n\n  getSelectedArgument(thingID: string) {\n    return this.webReqService.get(`arguments/${thingID}`);\n  }\n\n  getTerms() {\n    return this.webReqService.get('dictionary');\n  }\n\n  getSelectedPending(tempID: string) {\n    return this.webReqService.get(`editors/pending/${tempID}`);\n  }\n\n  getSelectedApproved(tempID: string) {\n    return this.webReqService.get(`editors/approved/${tempID}`);\n  }\n  \n  getSelectedArgumentxxx(argumentID: string) {\n    return this.webReqService.get(`new/${argumentID}`);\n  }\n\n  getAllArguments() {\n    return this.webReqService.get('editors');\n  }\n\n  getSelectedAnswer(argumentID: string ,answerID: string) {\n    return this.webReqService.get(`arguments/${argumentID}/${answerID}`);\n  }\n\n  getSelectedTerm(termID: string) {\n    return this.webReqService.get(`dictionary/${termID}`);\n  }\n  \n  getAnswerForEditing(argumentID: string ,answerID: string) {\n    return this.webReqService.get(`edit/${argumentID}/${answerID}`);\n  }\n\n  getSearchResults(searchTerm: string) {\n    return this.webReqService.get(`search/${searchTerm}`);\n  }\n\n  // GET <<<\n\n  // SUBMIT >>>\n\n  // SUBMIT <<<\n\n  submitNewArgument(title: string, answer: {short: string, full: string}, email: string) {\n    return this.webReqService.post('new', { title, answer, email });\n  }\n\n  submitNewAnswer(argumentID: String, title: string, answer: {short: string, full: string}, \n    email: string) {\n    return this.webReqService.post(`new/${argumentID}`, { argumentID, title, answer, email });\n  }\n\n  submitEditedAnswer(argumentID: String, answerID: string, title: string, \n    answer: {short: string, full: string}, email: string) {\n    return this.webReqService.post(`edit/${argumentID}/${answerID}`, { argumentID, answerID,title, answer, email });\n  }\n\n  // APPROVE >>>\n\n  approveNewArgument(argumentID: String, title: string, answers: {short: string, full: string, tags: string[], rank: number}, \n    tags: string[]) {\n    return this.webReqService.post(`editors/pending/${argumentID}`, { title, answers, tags });\n  }\n  \n  approveNewAnswer(tempID: String, title: string, answers: {short: string, full: string, tags: string[], rank: number}, argID: string ) {\n    return this.webReqService.patch(`new-answer/${tempID}`, { answers, argID });\n  }\n\n  approveEditedAnswer(tempID: String, answerID: string, editedAnswer: {short: string, full: string, tags: string[], rank: number}, answers: A[], argID: string ) {\n    return this.webReqService.patch(`editors/pending/${tempID}`, { answers, argID, answerID, editedAnswer });\n  }\n\n  // APPROVE <<<\n\n  // STRAIGHT BY EDITORS >>>\n\n  straightNewArgument(title: string, answers: {short: string, full: string, tags: string[], rank: number}, \n    tags: string[]) {\n    return this.webReqService.post('editors/new', { title, answers, tags });\n  }\n\n  // STRAIGHT BY EDITORS <<<\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}