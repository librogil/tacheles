{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError, empty, Subject } from 'rxjs';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nlet WebReqInterceptor = class WebReqInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n    this.accessTokenRefreshed = new Subject();\n  }\n  intercept(request, next) {\n    // Handle the request\n    request = this.addAuthHeader(request);\n    // call next() and handle the response\n    return next.handle(request).pipe(catchError(error => {\n      console.log(error);\n      if (error.status === 401) {\n        // 401 error so we are unauthorized\n        // refresh the access token\n        return this.refreshAccessToken().pipe(switchMap(() => {\n          request = this.addAuthHeader(request);\n          return next.handle(request);\n        }), catchError(err => {\n          console.log(err);\n          this.authService.logout();\n          return empty();\n        }));\n      }\n      return throwError(error);\n    }));\n  }\n  refreshAccessToken() {\n    if (this.refreshingAccessToken) {\n      return new Observable(observer => {\n        this.accessTokenRefreshed.subscribe(() => {\n          // this code will run when the access token has been refreshed\n          observer.next();\n          observer.complete();\n        });\n      });\n    } else {\n      this.refreshingAccessToken = true;\n      // we want to call a method in the auth service to send a request to refresh the access token\n      return this.authService.getNewAccessToken().pipe(tap(() => {\n        console.log(\"Access Token Refreshed!\");\n        this.refreshingAccessToken = false;\n        this.accessTokenRefreshed.next();\n      }));\n    }\n  }\n  addAuthHeader(request) {\n    // get the access token\n    const token = this.authService.getAccessToken();\n    if (token) {\n      // append the access token to the request header\n      return request.clone({\n        setHeaders: {\n          'x-access-token': token\n        }\n      });\n    }\n    return request;\n  }\n};\nWebReqInterceptor = __decorate([Injectable({\n  providedIn: 'root'\n})], WebReqInterceptor);\nexport { WebReqInterceptor };","map":{"version":3,"names":["Injectable","Observable","throwError","empty","Subject","catchError","tap","switchMap","WebReqInterceptor","constructor","authService","accessTokenRefreshed","intercept","request","next","addAuthHeader","handle","pipe","error","console","log","status","refreshAccessToken","err","logout","refreshingAccessToken","observer","subscribe","complete","getNewAccessToken","token","getAccessToken","clone","setHeaders","__decorate","providedIn"],"sources":["/Users/librogil/Dropbox/CS/Apps/TACHELES/tacheles/front/src/app/web-req.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, empty, Subject } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebReqInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) { }\n\n  refreshingAccessToken: boolean;\n\n  accessTokenRefreshed: Subject<any> = new Subject();\n\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    // Handle the request\n    request = this.addAuthHeader(request);\n\n    // call next() and handle the response\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.log(error);\n\n        if (error.status === 401) {\n          // 401 error so we are unauthorized\n\n          // refresh the access token\n          return this.refreshAccessToken()\n            .pipe(\n              switchMap(() => {\n                request = this.addAuthHeader(request);\n                return next.handle(request);\n              }),\n              catchError((err: any) => {\n                console.log(err);\n                this.authService.logout();\n                return empty();\n              })\n            )\n        }\n\n        return throwError(error);\n      })\n    )\n  }\n\n  refreshAccessToken() {\n    if (this.refreshingAccessToken) {\n      return new Observable(observer => {\n        this.accessTokenRefreshed.subscribe(() => {\n          // this code will run when the access token has been refreshed\n          observer.next();\n          observer.complete();\n        })\n      })\n    } else {\n      this.refreshingAccessToken = true;\n      // we want to call a method in the auth service to send a request to refresh the access token\n      return this.authService.getNewAccessToken().pipe(\n        tap(() => {\n          console.log(\"Access Token Refreshed!\");\n          this.refreshingAccessToken = false;\n          this.accessTokenRefreshed.next();\n        })\n      )\n    }\n    \n  }\n\n\n  addAuthHeader(request: HttpRequest<any>) {\n    // get the access token\n    const token = this.authService.getAccessToken();\n\n    if (token) {\n      // append the access token to the request header\n      return request.clone({\n        setHeaders: {\n          'x-access-token': token\n        }\n      })\n    }\n    return request;\n  }\n\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,UAAU,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,QAAQ,MAAM;AAE7D,SAASC,UAAU,EAAEC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;AAK3D,IAAaC,iBAAiB,GAA9B,MAAaA,iBAAiB;EAE5BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAI/B,KAAAC,oBAAoB,GAAiB,IAAIP,OAAO,EAAE;EAJF;EAOhDQ,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IACAD,OAAO,GAAG,IAAI,CAACE,aAAa,CAACF,OAAO,CAAC;IAErC;IACA,OAAOC,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAC9BZ,UAAU,CAAEa,KAAwB,IAAI;MACtCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAElB,IAAIA,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;QACxB;QAEA;QACA,OAAO,IAAI,CAACC,kBAAkB,EAAE,CAC7BL,IAAI,CACHV,SAAS,CAAC,MAAK;UACbM,OAAO,GAAG,IAAI,CAACE,aAAa,CAACF,OAAO,CAAC;UACrC,OAAOC,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC;QAC7B,CAAC,CAAC,EACFR,UAAU,CAAEkB,GAAQ,IAAI;UACtBJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;UAChB,IAAI,CAACb,WAAW,CAACc,MAAM,EAAE;UACzB,OAAOrB,KAAK,EAAE;QAChB,CAAC,CAAC,CACH;;MAGL,OAAOD,UAAU,CAACgB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAEAI,kBAAkBA,CAAA;IAChB,IAAI,IAAI,CAACG,qBAAqB,EAAE;MAC9B,OAAO,IAAIxB,UAAU,CAACyB,QAAQ,IAAG;QAC/B,IAAI,CAACf,oBAAoB,CAACgB,SAAS,CAAC,MAAK;UACvC;UACAD,QAAQ,CAACZ,IAAI,EAAE;UACfY,QAAQ,CAACE,QAAQ,EAAE;QACrB,CAAC,CAAC;MACJ,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACH,qBAAqB,GAAG,IAAI;MACjC;MACA,OAAO,IAAI,CAACf,WAAW,CAACmB,iBAAiB,EAAE,CAACZ,IAAI,CAC9CX,GAAG,CAAC,MAAK;QACPa,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtC,IAAI,CAACK,qBAAqB,GAAG,KAAK;QAClC,IAAI,CAACd,oBAAoB,CAACG,IAAI,EAAE;MAClC,CAAC,CAAC,CACH;;EAGL;EAGAC,aAAaA,CAACF,OAAyB;IACrC;IACA,MAAMiB,KAAK,GAAG,IAAI,CAACpB,WAAW,CAACqB,cAAc,EAAE;IAE/C,IAAID,KAAK,EAAE;MACT;MACA,OAAOjB,OAAO,CAACmB,KAAK,CAAC;QACnBC,UAAU,EAAE;UACV,gBAAgB,EAAEH;;OAErB,CAAC;;IAEJ,OAAOjB,OAAO;EAChB;CAED;AAhFYL,iBAAiB,GAAA0B,UAAA,EAH7BlC,UAAU,CAAC;EACVmC,UAAU,EAAE;CACb,CAAC,C,EACW3B,iBAAiB,CAgF7B;SAhFYA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}