{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/api.service\";\nclass ArgumentsListResolverService {\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  resolve() {\n    if (window.location.href.indexOf(\"false\") > -1) {\n      return this.apiService.getFalseArguments();\n    } else if (window.location.href.indexOf(\"true\") > -1) {\n      return this.apiService.getTrueArguments();\n    } else {\n      return this.apiService.getIrrefutableArguments();\n    }\n  }\n  static #_ = this.ɵfac = function ArgumentsListResolverService_Factory(t) {\n    return new (t || ArgumentsListResolverService)(i0.ɵɵinject(i1.APIService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArgumentsListResolverService,\n    factory: ArgumentsListResolverService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ArgumentsListResolverService };","map":{"version":3,"names":["ArgumentsListResolverService","constructor","apiService","resolve","window","location","href","indexOf","getFalseArguments","getTrueArguments","getIrrefutableArguments","_","i0","ɵɵinject","i1","APIService","_2","factory","ɵfac","providedIn"],"sources":["/Users/librogil/Dropbox/CS/Apps/TACHELES/tacheles/front/src/app/pages/user-pages/arguments-list/arguments-list-resolver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs'; \nimport { Argument } from 'src/app/models/argument.model';\nimport { APIService } from 'src/app/api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ArgumentsListResolverService {\n\n  constructor(private apiService: APIService) { }\n\n  resolve(): \n  Observable<any> | Promise<any> | Argument {\n    if ((window.location.href.indexOf(\"false\")) > -1) {\n      return this.apiService.getFalseArguments();\n    }\n    else if ((window.location.href.indexOf(\"true\")) > -1) {\n      return this.apiService.getTrueArguments();\n    }\n    else {\n      return this.apiService.getIrrefutableArguments();\n    }\n  }\n}"],"mappings":";;AAKA,MAIaA,4BAA4B;EAEvCC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAgB;EAE9CC,OAAOA,CAAA;IAEL,IAAKC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAC,OAAO,CAAC,GAAI,CAAC,CAAC,EAAE;MAChD,OAAO,IAAI,CAACL,UAAU,CAACM,iBAAiB,EAAE;KAC3C,MACI,IAAKJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAC,MAAM,CAAC,GAAI,CAAC,CAAC,EAAE;MACpD,OAAO,IAAI,CAACL,UAAU,CAACO,gBAAgB,EAAE;KAC1C,MACI;MACH,OAAO,IAAI,CAACP,UAAU,CAACQ,uBAAuB,EAAE;;EAEpD;EAAC,QAAAC,CAAA,G;qBAfUX,4BAA4B,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAA5BhB,4BAA4B;IAAAiB,OAAA,EAA5BjB,4BAA4B,CAAAkB,IAAA;IAAAC,UAAA,EAH3B;EAAM;;SAGPnB,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}